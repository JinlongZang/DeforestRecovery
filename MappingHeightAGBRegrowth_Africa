//var DeforAfterDegraYear = ee.ImageCollection("projects/JRC/TMF/v1_2021/DeforestationAfterDegradationYear").select("DeforestationAfterDegradationYear");
//var DeforAfterDegraYearm =DeforAfterDegraYear.qualityMosaic('DeforestationAfterDegradationYear');
//print(DeforAfterDegraYearm);
//var deforest2 = DeforAfterDegraYearm.where(DeforAfterDegraYearm.lt(1990),0).where(DeforAfterDegraYearm.gte(1990),1);
//Map.addLayer(deforest2,{min: 0, max: 1, palette: palette2}, 'deforest2');

var DeforestationYear= ee.ImageCollection("projects/JRC/TMF/v1_2021/DeforestationYear").select("DeforestationYear");
var TransitionClass= ee.ImageCollection("projects/JRC/TMF/v1_2021/TransitionMap_MainClasses").select("TransitionClass");
var DeforestationYearm =DeforestationYear.qualityMosaic('DeforestationYear');
var TransitionClassm =TransitionClass.qualityMosaic('TransitionClass');

//提取1982-2019的砍伐时间和范围。第一句可以这么写var deforest = DeforestationYearm.updateMask(DeforestationYearm.gte(1982))
var deforest = DeforestationYearm.where(DeforestationYearm.gte(1982),DeforestationYearm)
                                  .where(DeforestationYearm.lt(1982),0);
var deforest_ = deforest.where(deforest.lt(2020),deforest)
                                  .where(deforest.gte(2020),0);                                 
var deforest1 = deforest_.updateMask(deforest_.neq(0)).toUint16();
//**制图恢复时间**
var recover_time=deforest1.multiply(-1).add(2020);

//提取四种恢复类型
var Transition = TransitionClassm.where(TransitionClassm.gt(43),0);
var Transition_ = Transition.where(Transition.lt(30),0);                                 
var Transition1 = Transition_.updateMask(Transition_.neq(0));

//**制图恢复类型**2019年(包括2019)之前砍伐的四种恢复类型，42：water；43：other
var recover_type2020_ = Transition1.updateMask(deforest1.mask()).toUint8();
//区分种植林和自然再生林
var tree_plantation = recover_type2020_.updateMask(recover_type2020_.eq(41));
var forest_regrowth = recover_type2020_.updateMask(recover_type2020_.eq(30));
var nonforest_recover = recover_type2020_.updateMask(recover_type2020_.gt(41));
var plantation1 = tree_plantation.where(tree_plantation,1);
var natural_regrowth_forest2 = forest_regrowth.where(forest_regrowth,2);
var nonforest_recover3 = nonforest_recover.where(nonforest_recover,3);
//合并
var recover_type2020 = ee.ImageCollection([plantation1, natural_regrowth_forest2, nonforest_recover3]).mosaic().uint8();

//**制图高度恢复量**2020树高恢复
var alltree_recover = ee.ImageCollection([forest_regrowth, tree_plantation]).mosaic();
//恢复时间
var forest_recover_time = recover_time.updateMask(alltree_recover.mask()).toUint8();
//恢复高度2020
var forest_height2000= ee.Image("projects/glad/GLCLU2020/Forest_height_2000").select("b1");
var forest_height2020= ee.Image("projects/glad/GLCLU2020/Forest_height_2020").select("b1");
var height_2020 = forest_height2020.updateMask(alltree_recover.mask());

//生成随机点提取恢复时间和恢复高度
var points_Africa = ee.FeatureCollection.randomPoints(geometry, 50000);
var height_Values = height_2020.reduceRegions({
  collection: points_Africa,
  reducer: ee.Reducer.mean(),
  scale: 30,
});
var recovertime_Values = forest_recover_time.reduceRegions({
  collection: points_Africa,
  reducer: ee.Reducer.mean(),
  scale: 30,
});

//导出建立恢复时间高度关系公式
Export.table.toDrive({
  collection:height_Values,
  folder:"Africa_height_random",
  description: "Africa_height_random",
  fileNamePrefix: "Africa_height_random",
});
Export.table.toDrive({
  collection:recovertime_Values,
  folder:"Africa_recovertime_random",
  description: "Africa_recovertime_random",
  fileNamePrefix: "Africa_recovertime_random",
});
////高度和生物量制图(附加恢复比例)
//再生林高度公式f(x) = -19.14*e^-0.0851x+19.01
//再生林生物量公式(30m*30m)/(100m*100m)* 0.2788h^2.12 = 0.0251h^2.12. unit: Mg/900m^2
//原始林参考树高计算，先用"Global 4-class PALSAR-2/PALSAR Forest/Non-Forest Map"筛选
var FNF4 = ee.ImageCollection('JAXA/ALOS/PALSAR/YEARLY/FNF4')
                  .filterDate('2020-01-01', '2020-12-31')
                  .select('fnf');
var FNF = FNF4.qualityMosaic('fnf');
//1_Dense forest; 2_Non-dence Forest; 3_Non-forest; 4_Water
var forest_2020 = FNF.updateMask(FNF.lte(2));
var gfc2022 = ee.Image('UMD/hansen/global_forest_change_2022_v1_10');
var lossyear = gfc2022.select(['lossyear']);
var lossyear2019 = lossyear.updateMask(lossyear.lt(20));
var virgin_forest_height= forest_height2020.updateMask(forest_2020
                       .updateMask(lossyear2019.mask().not()).updateMask(recover_type2020.mask().not()));
//颜色条
var palettes = require('users/gena/packages:palettes');
var palette1 = palettes.colorbrewer.OrRd[9];
var palette2 = palettes.colorbrewer.Purples[9];
var palette3 = palettes.colorbrewer.Set1[9];
var palette4 = palettes.colorbrewer.Greens[9];
//原始林高度计算
var statistics = virgin_forest_height.reduceRegion({
  reducer: ee.Reducer.mean().combine(ee.Reducer.stdDev(), '', true), // 同时计算均值和标准差
  geometry: geometry, // 指定矢量范围的几何
  scale: 500, // 分辨率，单位为米
  maxPixels: 1e13 // 最大像素数
});
print('均值:', statistics.get('b1_mean'));
print('标准差:', statistics.get('b1_stdDev'));

//***种植林考虑*10再转整形输出***
//**1984参考AGB**
var height_1981_reference = 18;//SD=11.50
var AGB_1981_reference= ee.Number(18).pow(2.12).multiply(0.0251).multiply(10);

//2020
var AGB_2020_=  height_2020.pow(2.12).multiply(0.0251).add(0.1).multiply(10).toUint8();//乘了10倍，加0.1为了避免出现0值
var AGB_2020 = AGB_2020_.updateMask(AGB_2020_.gt(0));
var height_recover2020_ratio = height_2020.float().divide(height_1981_reference).multiply(100).toUint8().updateMask(height_2020.mask());
var AGB_recover2020_ratio = AGB_2020.float().divide(AGB_1981_reference).multiply(100).toUint8().updateMask(AGB_2020.mask());
//2015
var forest_recover_time2015 = forest_recover_time.subtract(5);
var frt2015 =  forest_recover_time2015.updateMask(forest_recover_time2015.gt(0));
var height_2015_ = frt2015.multiply(-0.0851).exp().multiply(-19.14).add(19.01).toUint8();
var height_2015 = height_2015_.updateMask(height_2015_.gt(2));
var height_recover2015_ratio = height_2015.float().divide(height_1981_reference).multiply(100).toUint8().updateMask(height_2015.mask());
var AGB_2015_=  height_2015.float().pow(2.12).multiply(0.0251).add(0.1).multiply(10).toUint8();//乘了10倍，加0.1为了避免出现0值
var AGB_2015 = AGB_2015_.updateMask(AGB_2015_.gt(0));
var AGB_recover2015_ratio = AGB_2015.float().divide(AGB_1981_reference).multiply(100).toUint8().updateMask(AGB_2015.mask());
//2010
var forest_recover_time2010 = forest_recover_time2015.subtract(5);
var frt2010 =  forest_recover_time2010.updateMask(forest_recover_time2010.gt(0));
var height_2010_ = frt2010.multiply(-0.0851).exp().multiply(-19.14).add(19.01).toUint8();
var height_2010 = height_2010_.updateMask(height_2010_.gt(2));
var height_recover2010_ratio = height_2010.float().divide(height_1981_reference).multiply(100).toUint8().updateMask(height_2010.mask());
var AGB_2010_=  height_2010.float().pow(2.12).multiply(0.0251).add(0.1).multiply(10).toUint8();//乘了10倍，加0.1为了避免出现0值
var AGB_2010 = AGB_2010_.updateMask(AGB_2010_.gt(0));
var AGB_recover2010_ratio = AGB_2010.float().divide(AGB_1981_reference).multiply(100).toUint8().updateMask(AGB_2010.mask());
//2005
var forest_recover_time2005 = forest_recover_time2010.subtract(5);
var frt2005 = forest_recover_time2005.updateMask(forest_recover_time2005.gt(0));
var height_2005_ = frt2005.multiply(-0.0851).exp().multiply(-19.14).add(19.01).toUint8();
var height_2005 = height_2005_.updateMask(height_2005_.gt(2));
var height_recover2005_ratio = height_2005.float().divide(height_1981_reference).multiply(100).toUint8().updateMask(height_2005.mask());
var AGB_2005_=  height_2005.float().pow(2.12).multiply(0.0251).add(0.1).multiply(10).toUint8();//乘了10倍，加0.1为了避免出现0值
var AGB_2005 = AGB_2005_.updateMask(AGB_2005_.gt(0));
var AGB_recover2005_ratio = AGB_2005.float().divide(AGB_1981_reference).multiply(100).toUint8().updateMask(AGB_2005.mask());
//2000
var forest_recover_time2000 = forest_recover_time2005.subtract(5);
var frt2000 = forest_recover_time2000.updateMask(forest_recover_time2000.gt(0));
var height_2000_ = frt2000.multiply(-0.0851).exp().multiply(-19.14).add(19.01).toUint8();
var height_2000 = height_2000_.updateMask(height_2000_.gt(2));
var height_recover2000_ratio = height_2000.float().divide(height_1981_reference).multiply(100).toUint8().updateMask(height_2000.mask());
var AGB_2000_=  height_2000.float().pow(2.12).multiply(0.0251).add(0.1).multiply(10).toUint8();//乘了10倍，加0.1为了避免出现0值
var AGB_2000 = AGB_2000_.updateMask(AGB_2000_.gt(0));
var AGB_recover2000_ratio = AGB_2000.float().divide(AGB_1981_reference).multiply(100).toUint8().updateMask(AGB_2000.mask());
//1995
var forest_recover_time1995 = forest_recover_time2000.subtract(5);
var frt1995 = forest_recover_time1995.updateMask(forest_recover_time1995.gt(0));
var height_1995_ = frt1995.multiply(-0.0851).exp().multiply(-19.14).add(19.01).toUint8();
var height_1995 = height_1995_.updateMask(height_1995_.gt(2));
var height_recover1995_ratio = height_1995.float().divide(height_1981_reference).multiply(100).toUint8().updateMask(height_1995.mask());
var AGB_1995_=  height_1995.float().pow(2.12).multiply(0.0251).add(0.1).multiply(10).toUint8();//乘了10倍，加0.1为了避免出现0值
var AGB_1995 = AGB_1995_.updateMask(AGB_1995_.gt(0));
var AGB_recover1995_ratio = AGB_1995.float().divide(AGB_1981_reference).multiply(100).toUint8().updateMask(AGB_1995.mask());
//1990
var forest_recover_time1990 = forest_recover_time1995.subtract(5);
var frt1990 = forest_recover_time1990.updateMask(forest_recover_time1990.gt(0));
var height_1990_ = frt1990.multiply(-0.0851).exp().multiply(-19.14).add(19.01).toUint8();
var height_1990 = height_1990_.updateMask(height_1990_.gt(2));
var height_recover1990_ratio = height_1990.float().divide(height_1981_reference).multiply(100).toUint8().updateMask(height_1990.mask());
var AGB_1990_=  height_1990.float().pow(2.12).multiply(0.0251).add(0.1).multiply(10).toUint8();//乘了10倍，加0.1为了避免出现0值
var AGB_1990 = AGB_1990_.updateMask(AGB_1990_.gt(0));
var AGB_recover1990_ratio = AGB_1990.float().divide(AGB_1981_reference).multiply(100).toUint8().updateMask(AGB_1990.mask());
//1985
var forest_recover_time1985 = forest_recover_time1990.subtract(5);
var frt1985 = forest_recover_time1985.updateMask(forest_recover_time1985.gt(0));
var height_1985_ = frt1985.multiply(-0.0851).exp().multiply(-19.14).add(19.01).toUint8();
var height_1985 = height_1985_.updateMask(height_1985_.gt(2));
var height_recover1985_ratio = height_1985.float().divide(height_1981_reference).multiply(100).toUint8().updateMask(height_1985.mask());
var AGB_1985_=  height_1985.float().pow(2.12).multiply(0.0251).add(0.1).multiply(10).toUint8();//乘了10倍，加0.1为了避免出现0值
var AGB_1985 = AGB_1985_.updateMask(AGB_1985_.gt(0));
var AGB_recover1985_ratio = AGB_1985.float().divide(AGB_1981_reference).multiply(100).toUint8().updateMask(AGB_1985.mask());

//制图恢复速率（高度和生物量）放大了10倍
//高度公式求导后f(x) = 1.6288*e^-0.0851x   //-19.14*e^-0.0851x+19.01
//生物量与恢复时间公式f(x) =  0.0251(-19.14*e^-0.0851x+19.01)^2.12
//上式求导后= 0.0251*1.6288*2.12*(-19.14*e^-0.0851x+19.01)^1.12*e^-0.0851x = 0.0867(-19.14*e^-0.0851x+19.01)^1.12*e^-0.0851x
//2020
var height_recover_rate2020 = forest_recover_time.multiply(-0.0851).exp().multiply(1.6288).add(0.1).multiply(10).toUint8();
var AGB_recover_rate2020 = forest_recover_time.multiply(-0.0851).exp().multiply(0.0867).multiply
      (forest_recover_time.multiply(-0.0851).exp().multiply(-19.14).add(19.01).pow(1.12)).add(0.1).multiply(10).toUint8();
//2015
var height_recover_rate2015 = frt2015.multiply(-0.0851).exp().multiply(1.6288).add(0.1).multiply(10).toUint8();
var AGB_recover_rate2015 = frt2015.multiply(-0.0851).exp().multiply(0.0867).multiply
      (frt2015.multiply(-0.0851).exp().multiply(-19.14).add(19.01).pow(1.12)).add(0.1).multiply(10).toUint8();
//2010
var height_recover_rate2010 = frt2010.multiply(-0.0851).exp().multiply(1.6288).add(0.1).multiply(10).toUint8();
var AGB_recover_rate2010 = frt2010.multiply(-0.0851).exp().multiply(0.0867).multiply
      (frt2010.multiply(-0.0851).exp().multiply(-19.14).add(19.01).pow(1.12)).add(0.1).multiply(10).toUint8();
//2005
var height_recover_rate2005 = frt2005.multiply(-0.0851).exp().multiply(1.6288).add(0.1).multiply(10).toUint8();
var AGB_recover_rate2005 = frt2005.multiply(-0.0851).exp().multiply(0.0867).multiply
      (frt2005.multiply(-0.0851).exp().multiply(-19.14).add(19.01).pow(1.12)).add(0.1).multiply(10).toUint8();
//2000
var height_recover_rate2000 = frt2000.multiply(-0.0851).exp().multiply(1.6288).add(0.1).multiply(10).toUint8();
var AGB_recover_rate2000 = frt2000.multiply(-0.0851).exp().multiply(0.0867).multiply
      (frt2000.multiply(-0.0851).exp().multiply(-19.14).add(19.01).pow(1.12)).add(0.1).multiply(10).toUint8();
//1995
var height_recover_rate1995 = frt1995.multiply(-0.0851).exp().multiply(1.6288).add(0.1).multiply(10).toUint8();
var AGB_recover_rate1995 = frt1995.multiply(-0.0851).exp().multiply(0.0867).multiply
      (frt1995.multiply(-0.0851).exp().multiply(-19.14).add(19.01).pow(1.12)).add(0.1).multiply(10).toUint8();
//1990
var height_recover_rate1990 = frt1990.multiply(-0.0851).exp().multiply(1.6288).add(0.1).multiply(10).toUint8();
var AGB_recover_rate1990 = frt1990.multiply(-0.0851).exp().multiply(0.0867).multiply
      (frt1990.multiply(-0.0851).exp().multiply(-19.14).add(19.01).pow(1.12)).add(0.1).multiply(10).toUint8();
//1985
var height_recover_rate1985 = frt1985.multiply(-0.0851).exp().multiply(1.6288).add(0.1).multiply(10).toUint8();
var AGB_recover_rate1985 = frt1985.multiply(-0.0851).exp().multiply(0.0867).multiply
      (frt1985.multiply(-0.0851).exp().multiply(-19.14).add(19.01).pow(1.12)).add(0.1).multiply(10).toUint8();

//生成随机点验证2000高度
var points_Africa1 = ee.FeatureCollection.randomPoints(geometry, 500000);
var height_my = height_2000.reduceRegions({
  collection: points_Africa1,
  reducer: ee.Reducer.mean(),
  scale: 30,
});
var height_his = forest_height2000.reduceRegions({
  collection: points_Africa1,
  reducer: ee.Reducer.mean(),
  scale: 30,
});

//导出
Export.table.toDrive({
  collection:height_my,
  folder:"Africa_height_validation2000",
  description: "Africa_height_my_2000",
  fileNamePrefix: "Africa_height_my_2000",
});
Export.table.toDrive({
  collection:height_his,
  folder:"Africa_height_validation2000",
  description: "Africa_height_his_2000",
  fileNamePrefix: "Africa_height_his_2000",
});

//验证2010AGB
var AGB_reference2010 = ee.Image("projects/sat-io/open-datasets/ESA/ESA_CCI_AGB/CCI_BIOMASS_100m_AGB_2010_v4").select(['AGB']);
//Map.addLayer(AGB_reference2010,{min:1,max:450,palette: palette4},'AGB_reference2010');
//var AGB_2010 = AGB_2010.setDefaultProjection({crs: 'EPSG:4326',scale: 30});
//var AGB_my2010_100 = AGB_2010.reduceResolution({reducer: ee.Reducer.mean(),maxPixels: 10000})
   // .reproject({crs: 'EPSG:4326',scale: 100}).float().divide(10).divide(0.09);
var AGB_my2010_100 = AGB_2010.float().divide(10).divide(0.09);
//Map.addLayer(AGB_my2010_100,{min:1,max:450,palette: palette4},'AGB_2010_my100');
var validation_points = ee.FeatureCollection(validation, 'geometry');
var AGB_reference2010_Values = AGB_reference2010.reduceRegions({
  collection: validation_points,reducer: ee.Reducer.mean(),
  scale: 100,});
var AGB_my2010_100_Values = AGB_my2010_100.reduceRegions({
  collection: validation_points,reducer: ee.Reducer.mean(),
  scale: 100,});
//导出
Export.table.toDrive({
  collection:AGB_reference2010_Values,
  folder:"Africa_AGB_reference2010",
  description: "Africa_AGB_reference2010",
});
Export.table.toDrive({
  collection:AGB_my2010_100_Values,
  folder:"Africa_AGB_my2010",
  description: "Africa_AGB_my2010",
});

//Map.addLayer(deforest1,{min: 1982, max: 2019, palette: palette1}, 'deforest1');
//Map.addLayer(recover_time,{min: 1982, max: 2019, palette: palette1},'recover_time');
Map.addLayer(recover_type2020,{min: 1, max: 3, palette: palette3}, 'recover_type2020');
//Map.addLayer(forest_regrowth,{palette:["c9dd22"]}, 'forest_regrowth');
//Map.addLayer(tree_plantation,{palette:["057748"]}, 'tree_plantation');
////show height
//Map.addLayer(height_regrowth2020,{min: 0, max: 40, palette: palette4}, 'height_regrowth2020');
//Map.addLayer(height_plantation2020,{min: 0, max: 40, palette: palette4}, 'height_plantation2020');
//Map.addLayer(height_2015,{min: 0, max: 40, palette: palette4}, 'height_2015');
//Map.addLayer(height_2010,{min: 0, max: 40, palette: palette4}, 'height_2010');
//Map.addLayer(height_2005,{min: 0, max: 40, palette: palette4}, 'height_2005');
//Map.addLayer(height_2000,{min: 0, max: 40, palette: palette4}, 'height_2000');
//Map.addLayer(height_1995,{min: 0, max: 40, palette: palette4}, 'height_1995');
//Map.addLayer(height_1990,{min: 0, max: 40, palette: palette4}, 'height_1990');
//Map.addLayer(height_1985,{min: 0, max: 40, palette: palette4}, 'height_1985');
////show AGB
//Map.addLayer(AGB_2020,{min: 0, max: 20, palette: palette4}, 'AGB_2020');
//Map.addLayer(AGB_2015,{min: 0, max: 20, palette: palette4}, 'AGB_2015');
//Map.addLayer(AGB_2010,{min: 0, max: 20, palette: palette4}, 'AGB_2010');
//Map.addLayer(AGB_2005,{min: 0, max: 20, palette: palette4}, 'AGB_2005');
//Map.addLayer(AGB_2000,{min: 0, max: 20, palette: palette4}, 'AGB_2000');
//Map.addLayer(AGB_1995,{min: 0, max: 20, palette: palette4}, 'AGB_1995');
//Map.addLayer(AGB_1990,{min: 0, max: 20, palette: palette4}, 'AGB_1990');
//Map.addLayer(AGB_1985,{min: 0, max: 20, palette: palette4}, 'AGB_1985');
////亚马逊和东南亚边界
//var styling={color:'black',fillColor:'00000000'};
//Map.addLayer(table.style(styling),{},"SE_ASIA");//设置显示样式：color代表边界颜色；fillcolor代表填充颜色
//Map.addLayer(table2.style(styling),{},"Amazon");
var height_regrowth = recover_type2020.addBands([
                    height_recover2020_ratio, height_recover2015_ratio, height_recover2010_ratio, height_recover2005_ratio,
                    height_recover2000_ratio, height_recover1995_ratio, height_recover1990_ratio, height_recover1985_ratio,
                    height_recover_rate2020, height_recover_rate2015, height_recover_rate2010, height_recover_rate2005, 
                    height_recover_rate2000, height_recover_rate1995, height_recover_rate1990, height_recover_rate1985])
                    .rename([
                    'Regrowth_type_2020',
                    'Height_regrowth_ratio_2020', 'Height_regrowth_ratio_2015', 'Height_regrowth_ratio_2010', 'Height_regrowth_ratio_2005',
                    'Height_regrowth_ratio_2000', 'Height_regrowth_ratio_1995', 'Height_regrowth_ratio_1990', 'Height_regrowth_ratio_1985',
                    'Height_regrowth_rate_2020', 'Height_regrowth_rate_2015', 'Height_regrowth_rate_2010', 'Height_regrowth_rate_2005',
                    'Height_regrowth_rate_2000', 'Height_regrowth_rate_1995', 'Height_regrowth_rate_1990', 'Height_regrowth_rate_1985']);
var AGB_regrowth = recover_type2020.addBands([
                    AGB_recover2020_ratio, AGB_recover2015_ratio, AGB_recover2010_ratio, AGB_recover2005_ratio,
                    AGB_recover2000_ratio, AGB_recover1995_ratio, AGB_recover1990_ratio, AGB_recover1985_ratio,
                    AGB_recover_rate2020, AGB_recover_rate2015, AGB_recover_rate2010, AGB_recover_rate2005, 
                    AGB_recover_rate2000, AGB_recover_rate1995, AGB_recover_rate1990, AGB_recover_rate1985])
                    .rename([
                    'Regrowth_type_2020', 
                    'AGB_regrowth_ratio_2020', 'AGB_regrowth_ratio_2015', 'AGB_regrowth_ratio_2010', 'AGB_regrowth_ratio_2005',
                    'AGB_regrowth_ratio_2000', 'AGB_regrowth_ratio_1995', 'AGB_regrowth_ratio_1990', 'AGB_regrowth_ratio_1985',
                    'AGB_regrowth_rate_2020', 'AGB_regrowth_rate_2015', 'AGB_regrowth_rate_2010', 'AGB_regrowth_rate_2005',
                    'AGB_regrowth_rate_2000', 'AGB_regrowth_rate_1995', 'AGB_regrowth_rate_1990', 'AGB_regrowth_rate_1985']);

// 导出影像30
//export Afirca1
var lonMin = 10; var lonMax = 40; 
var latMin = -10; var latMax = 10; 
for (var lon = lonMin; lon < lonMax; lon += 10) {for (var lat = latMin; lat < latMax; lat += 10) {
    var blockGeometry = ee.Geometry.Rectangle([lon, lat, lon + 10, lat + 10]);
    var clipped_height_regrowth = height_regrowth.clip(blockGeometry);
    var clipped_AGB_regrowth = AGB_regrowth.clip(blockGeometry);
    var direction = '';if (lat >= 0) {direction += 'N' + lat ;} else {direction += 'S' + -lat;} if (lon >= 0) {direction += '_E'  + lon;} else {direction += '_W' + -lon ;}
    var export1 = {image: clipped_height_regrowth,description: 'Afirca_height_regrowth_' + direction,
    folder: 'Deforest_Afirca_height_regrowth30',scale: 30, crs: 'EPSG:4326', maxPixels: 1e13, fileDimensions: [18688, 18688], region: blockGeometry,skipEmptyTiles: true};Export.image.toDrive(export1);
    var export2 = {image: clipped_AGB_regrowth,description: 'Afirca_AGB_regrowth_' + direction,
    folder: 'Deforest_Afirca_AGB_regrowth30',scale: 30, crs: 'EPSG:4326', maxPixels: 1e13, fileDimensions: [18688, 18688], region: blockGeometry,skipEmptyTiles: true};Export.image.toDrive(export2);}}
//export Afirca2
var lonMin = -10; var lonMax = 10; 
var latMin = 0; var latMax = 10; 
for (var lon = lonMin; lon < lonMax; lon += 10) {for (var lat = latMin; lat < latMax; lat += 10) {
    var blockGeometry = ee.Geometry.Rectangle([lon, lat, lon + 10, lat + 10]);
    var clipped_height_regrowth = height_regrowth.clip(blockGeometry);
    var clipped_AGB_regrowth = AGB_regrowth.clip(blockGeometry);
    var direction = '';if (lat >= 0) {direction += 'N' + lat ;} else {direction += 'S' + -lat;} if (lon >= 0) {direction += '_E'  + lon;} else {direction += '_W' + -lon ;}
   var export1 = {image: clipped_height_regrowth,description: 'Afirca_height_regrowth_' + direction,
    folder: 'Deforest_Afirca_height_regrowth30',scale: 30, crs: 'EPSG:4326', maxPixels: 1e13, fileDimensions: [18688, 18688], region: blockGeometry,skipEmptyTiles: true};Export.image.toDrive(export1);
   var export2 = {image: clipped_AGB_regrowth,description: 'Afirca_AGB_regrowth_' + direction,
    folder: 'Deforest_Afirca_AGB_regrowth30',scale: 30, crs: 'EPSG:4326', maxPixels: 1e13, fileDimensions: [18688, 18688], region: blockGeometry,skipEmptyTiles: true};Export.image.toDrive(export2);}}

// 导出影像500
//Export.image.toDrive({image: height_regrowth,description: 'height_regrowth500',folder: 'Deforest_Africa_regrowth500',region: Africa,scale: 500,crs: 'EPSG:4326', maxPixels: 1e13,});  
//Export.image.toDrive({image: AGB_regrowth,description: 'AGB_regrowth500',folder: 'Deforest_Africa_regrowth500',region: Africa,scale: 500,crs: 'EPSG:4326', maxPixels: 1e13,});  
