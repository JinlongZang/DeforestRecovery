//var DeforAfterDegraYear = ee.ImageCollection("projects/JRC/TMF/v1_2021/DeforestationAfterDegradationYear").select("DeforestationAfterDegradationYear");
//var DeforAfterDegraYearm =DeforAfterDegraYear.qualityMosaic('DeforestationAfterDegradationYear');
//print(DeforAfterDegraYearm);
//var deforest2 = DeforAfterDegraYearm.where(DeforAfterDegraYearm.lt(1990),0).where(DeforAfterDegraYearm.gte(1990),1);
//Map.addLayer(deforest2,{min: 0, max: 1, palette: palette2}, 'deforest2');

var DeforestationYear= ee.ImageCollection("projects/JRC/TMF/v1_2021/DeforestationYear").select("DeforestationYear");
var TransitionClass= ee.ImageCollection("projects/JRC/TMF/v1_2021/TransitionMap_MainClasses").select("TransitionClass");
var DeforestationYearm =DeforestationYear.qualityMosaic('DeforestationYear');
var TransitionClassm =TransitionClass.qualityMosaic('TransitionClass');

//提取1982-2019的砍伐时间和范围。第一句可以这么写var deforest = DeforestationYearm.updateMask(DeforestationYearm.gte(1982))
var deforest = DeforestationYearm.where(DeforestationYearm.gte(1982),DeforestationYearm)
                                  .where(DeforestationYearm.lt(1982),0);
var deforest_ = deforest.where(deforest.lt(2020),deforest)
                                  .where(deforest.gte(2020),0);                                 
var deforest1 = deforest_.updateMask(deforest_.neq(0)).toUint16();
//**制图恢复时间**
var recover_time=deforest1.multiply(-1).add(2020);

//提取四种恢复类型
var Transition = TransitionClassm.where(TransitionClassm.gt(43),0);
var Transition_ = Transition.where(Transition.lt(30),0);                                 
var Transition1 = Transition_.updateMask(Transition_.neq(0));

//**制图恢复类型**2019年(包括2019)之前砍伐的四种恢复类型，42：water；43：other land cover
var recover_type2020_ = Transition1.updateMask(deforest1.mask()).toUint8();
//区分种植林和自然再生林
var tree_plantation = recover_type2020_.updateMask(recover_type2020_.eq(41));
var forest_regrowth = recover_type2020_.updateMask(recover_type2020_.eq(30));
var nonforest_recover = recover_type2020_.updateMask(recover_type2020_.gt(41));
var plantation1 = tree_plantation.where(tree_plantation,1);
var natural_regrowth_forest2 = forest_regrowth.where(forest_regrowth,2);
var nonforest_recover3 = nonforest_recover.where(nonforest_recover,3);
//合并
var recover_type2020 = ee.ImageCollection([plantation1, natural_regrowth_forest2, nonforest_recover3]).mosaic().uint8();

//**制图高度恢复量**
//2020树高恢复
var forest_height2000= ee.Image("projects/glad/GLCLU2020/Forest_height_2000").select("b1");
var forest_height2020= ee.Image("projects/glad/GLCLU2020/Forest_height_2020").select("b1");
var height_regrowth2020 = forest_height2020.updateMask(forest_regrowth.mask());
var height_plantation2020 = forest_height2020.updateMask(tree_plantation.mask());
var height_2020 = ee.ImageCollection([height_regrowth2020, height_plantation2020]).mosaic();

//生成随机点提取恢复时间和恢复高度
var points_SEAsia = ee.FeatureCollection.randomPoints(SE_Asia, 50000);
var plantation_recover_time = recover_time.updateMask(tree_plantation.mask());
var regrowth_recover_time = recover_time.updateMask(forest_regrowth.mask());
//恢复时间
var forest_recover_time = ee.ImageCollection([plantation_recover_time,regrowth_recover_time]).mosaic().toUint8();

var height_plantation_Values = height_plantation2020.reduceRegions({
  collection: points_SEAsia,
  reducer: ee.Reducer.mean(),
  scale: 30,
});
var recovertime_plantation_Values = plantation_recover_time.reduceRegions({
  collection: points_SEAsia,
  reducer: ee.Reducer.mean(),
  scale: 30,
});

//导出建立恢复时间高度关系公式
Export.table.toDrive({
  collection:height_plantation_Values,
  folder:"SEA_height_random",
  description: "SEA_height_random",
  fileNamePrefix: "SEA_height_random",
});
Export.table.toDrive({
  collection:recovertime_plantation_Values,
  folder:"SEA_recovertime_random",
  description: "SEA_recovertime_random",
  fileNamePrefix: "SEA_recovertime_random",
});

////高度和生物量制图(附加恢复比例)
//种植林高度公式f(x) = -16.92*e^-0.2021x+13.27
//种植林(印尼的油棕地上和地下(并不是AGB))生物量公式((30m*30m)/(100m*100m))*143*0.0001*(706 + 976*H) = 0.001287*(706 + 976*H)= 0.9086+1.2561H. unit: Mg/900m^2
//再生林生物量(阔叶林)公式(30m*30m)/(100m*100m)* 0.21608h^2.1604 = 0.0194 h^2.1604. unit: Mg/900m^2
//原始林参考树高计算，先用"Global 4-class PALSAR-2/PALSAR Forest/Non-Forest Map"筛选
var FNF4 = ee.ImageCollection('JAXA/ALOS/PALSAR/YEARLY/FNF4')
                  .filterDate('2020-01-01', '2020-12-31')
                  .select('fnf');
var FNF = FNF4.qualityMosaic('fnf');
//1_Dense forest; 2_Non-dence Forest; 3_Non-forest; 4_Water
var forest_2020 = FNF.updateMask(FNF.lte(2));
var gfc2022 = ee.Image('UMD/hansen/global_forest_change_2022_v1_10');
var lossyear = gfc2022.select(['lossyear']);
var lossyear2019 = lossyear.updateMask(lossyear.lt(20));
var virgin_forest_height= forest_height2020.updateMask(forest_2020
                       .updateMask(lossyear2019.mask().not()).updateMask(recover_type2020.mask().not()));
//颜色条
var palettes = require('users/gena/packages:palettes');
var palette1 = palettes.colorbrewer.OrRd[9];
var palette2 = palettes.colorbrewer.Purples[9];
var palette3 = palettes.colorbrewer.Set1[9];
var palette4 = palettes.colorbrewer.Greens[9];

//原始林高度计算
var virgin_forest_statistics = virgin_forest_height.reduceRegion({
  reducer: ee.Reducer.mean().combine(ee.Reducer.stdDev(), '', true), // 同时计算均值和标准差
  geometry: SE_Asia.geometry(), // 指定矢量范围的几何
  scale: 500, // 分辨率，单位为米
  maxPixels: 1e13 // 最大像素数
});
print('均值:', virgin_forest_statistics.get('b1_mean'));
print('标准差:', virgin_forest_statistics.get('b1_stdDev'));

//***种植林考虑*10再转整形输出***
//**1984参考AGB**
var a = -16.92; var b = -0.2021; var c = 13.27; var d = 0.0194; var e = 2.1604;
var height_1981_reference = 24;//; SD=9.19
var AGB_1981_reference = ee.Number(24).pow(e).multiply(d).multiply(10);

////恢复程度分开计算
//2020
//var AGB_plantation2020=  height_plantation2020.float().multiply(976).add(706).multiply(0.001287);
//var AGB_regrowth2020=  height_regrowth2020.pow(2.1604).multiply(0.0194);
//var AGB_2020_ = ee.ImageCollection([AGB_plantation2020, AGB_regrowth2020]).mosaic().add(0.1).multiply(10).toUint8();//乘了10倍，加0.1为了避免出现0值
//var AGB_2020 = AGB_2020_.updateMask(AGB_2020_.gt(0));
//var height_recover2020_ratio = height_2020.float().divide(height_1981_referance).multiply(100).toUint8().updateMask(height_2020.mask());
//var AGB_recover2020_ratio = AGB_2020.float().divide(AGB_1981_reference).multiply(100).toUint8().updateMask(AGB_2020.mask());
//2015
//var plantation_recover_time2015 = plantation_recover_time.subtract(5);
//var prt2015 = plantation_recover_time2015.updateMask(plantation_recover_time2015.gt(0));
//var height_plantation2015_ = prt2015.multiply(-0.2021).exp().multiply(-16.92).add(13.27).toUint8();
//var height_plantation2015 = height_plantation2015_.updateMask(height_plantation2015_.gt(2));
//var regrowth_recover_time2015 = regrowth_recover_time.subtract(5);
//var rrt2015 =  regrowth_recover_time2015.updateMask(regrowth_recover_time2015.gt(0));
//var height_regrowth2015_ = rrt2015.multiply(-0.2021).exp().multiply(-16.92).add(13.27).toUint8();
//var height_regrowth2015 = height_regrowth2015_.updateMask(height_regrowth2015_.gt(2));
//var height_2015 = ee.ImageCollection([height_regrowth2015, height_plantation2015]).mosaic();
//var height_recover2015_ratio = height_2015.float().divide(height_1981_referance).multiply(100).toUint8().updateMask(height_2015.mask());
//var AGB_plantation2015=  height_plantation2015.float().multiply(976).add(706).multiply(0.001287);
//var AGB_regrowth2015=  height_regrowth2015.float().pow(2.1604).multiply(0.0194);
//var AGB_2015_ = ee.ImageCollection([AGB_plantation2015, AGB_regrowth2015]).mosaic().add(0.1).multiply(10).toUint8();//AGB*10倍了，加0.1是为了避免出现0值
//var AGB_2015 = AGB_2015_.updateMask(AGB_2015_.gt(0));
//var AGB_recover2015_ratio = AGB_2015.float().divide(AGB_1981_reference).multiply(100).toUint8().updateMask(AGB_2015.mask());
//2010
//var plantation_recover_time2010 = plantation_recover_time2015.subtract(5);
//var prt2010 = plantation_recover_time2010.updateMask(plantation_recover_time2010.gt(0));
//var height_plantation2010_ = prt2010.multiply(-0.2021).exp().multiply(-16.92).add(13.27).toUint8();
//var height_plantation2010 = height_plantation2010_.updateMask(height_plantation2010_.gt(2));
//var regrowth_recover_time2010 = regrowth_recover_time2015.subtract(5);
//var rrt2010 =  regrowth_recover_time2010.updateMask(regrowth_recover_time2010.gt(0));
//var height_regrowth2010_ = rrt2010.multiply(-0.2021).exp().multiply(-16.92).add(13.27).toUint8();
//var height_regrowth2010 = height_regrowth2010_.updateMask(height_regrowth2010_.gt(2));
//var height_2010 = ee.ImageCollection([height_regrowth2010, height_plantation2010]).mosaic();
//var height_recover2010_ratio = height_2010.float().divide(height_1981_referance).multiply(100).toUint8().updateMask(height_2010.mask());
//var AGB_plantation2010=  height_plantation2010.float().multiply(976).add(706).multiply(0.001287);
//var AGB_regrowth2010=  height_regrowth2010.float().pow(2.1604).multiply(0.0194);
//var AGB_2010_ = ee.ImageCollection([AGB_plantation2010, AGB_regrowth2010]).mosaic().add(0.1).multiply(10).toUint8();//AGB*10倍了，加0.1是为了避免出现0值
//var AGB_2010 = AGB_2010_.updateMask(AGB_2010_.gt(0));
//var AGB_recover2010_ratio = AGB_2010.float().divide(AGB_1981_reference).multiply(100).toUint8().updateMask(AGB_2010.mask());
//2005
//var plantation_recover_time2005 = plantation_recover_time2010.subtract(5);
//var prt2005 = plantation_recover_time2005.updateMask(plantation_recover_time2005.gt(0));
//var height_plantation2005_ = prt2005.multiply(-0.2021).exp().multiply(-16.92).add(13.27).toUint8();
//var height_plantation2005 = height_plantation2005_.updateMask(height_plantation2005_.gt(2));
//var regrowth_recover_time2005 = regrowth_recover_time2010.subtract(5);
//var rrt2005 =  regrowth_recover_time2005.updateMask(regrowth_recover_time2005.gt(0));
//var height_regrowth2005_ = rrt2005.multiply(-0.2021).exp().multiply(-16.92).add(13.27).toUint8();
//var height_regrowth2005 = height_regrowth2005_.updateMask(height_regrowth2005_.gt(2));
//var height_2005 = ee.ImageCollection([height_regrowth2005, height_plantation2005]).mosaic();
//var height_recover2005_ratio = height_2005.float().divide(height_1981_referance).multiply(100).toUint8().updateMask(height_2005.mask());
//var AGB_plantation2005=  height_plantation2005.float().multiply(976).add(706).multiply(0.001287);
//var AGB_regrowth2005=  height_regrowth2005.float().pow(2.1604).multiply(0.0194);
//var AGB_2005_ = ee.ImageCollection([AGB_plantation2005, AGB_regrowth2005]).mosaic().add(0.1).multiply(10).toUint8();//AGB*10倍了，加0.1是为了避免出现0值
//var AGB_2005 = AGB_2005_.updateMask(AGB_2005_.gt(0));
//var AGB_recover2005_ratio = AGB_2005.float().divide(AGB_1981_reference).multiply(100).toUint8().updateMask(AGB_2005.mask());
//2000
//var plantation_recover_time2000 = plantation_recover_time2005.subtract(5);
//var prt2000 = plantation_recover_time2000.updateMask(plantation_recover_time2000.gt(0));
//var height_plantation2000_ = prt2000.multiply(-0.2021).exp().multiply(-16.92).add(13.27).toUint8();
//var height_plantation2000 = height_plantation2000_.updateMask(height_plantation2000_.gt(2));
//var regrowth_recover_time2000 = regrowth_recover_time2005.subtract(5);
//var rrt2000 =  regrowth_recover_time2000.updateMask(regrowth_recover_time2000.gt(0));
//var height_regrowth2000_ = rrt2000.multiply(-0.2021).exp().multiply(-16.92).add(13.27).toUint8();
//var height_regrowth2000 = height_regrowth2000_.updateMask(height_regrowth2000_.gt(2));
//var height_2000 = ee.ImageCollection([height_regrowth2000, height_plantation2000]).mosaic();
//var height_recover2000_ratio = height_2000.float().divide(height_1981_referance).multiply(100).toUint8().updateMask(height_2000.mask());
//var AGB_plantation2000 =  height_plantation2000.float().multiply(976).add(706).multiply(0.001287);
//var AGB_regrowth2000 =  height_regrowth2000.float().pow(2.1604).multiply(0.0194);
//var AGB_2000_ = ee.ImageCollection([AGB_plantation2000, AGB_regrowth2000]).mosaic().add(0.1).multiply(10).toUint8();//AGB*10倍了，加0.1是为了避免出现0值
//var AGB_2000 = AGB_2000_.updateMask(AGB_2000_.gt(0));
//var AGB_recover2000_ratio = AGB_2000.float().divide(AGB_1981_reference).multiply(100).toUint8().updateMask(AGB_2000.mask());
//1995
//var plantation_recover_time1995 = plantation_recover_time2000.subtract(5);
//var prt1995 = plantation_recover_time1995.updateMask(plantation_recover_time1995.gt(0));
//var height_plantation1995_ = prt1995.multiply(-0.2021).exp().multiply(-16.92).add(13.27).toUint8();
//var height_plantation1995 = height_plantation1995_.updateMask(height_plantation1995_.gt(2));
//var regrowth_recover_time1995 = regrowth_recover_time2000.subtract(5);
//var rrt1995 =  regrowth_recover_time1995.updateMask(regrowth_recover_time1995.gt(0));
//var height_regrowth1995_ = rrt1995.multiply(-0.2021).exp().multiply(-16.92).add(13.27).toUint8();
//var height_regrowth1995 = height_regrowth1995_.updateMask(height_regrowth1995_.gt(2));
//var height_1995 = ee.ImageCollection([height_regrowth1995, height_plantation1995]).mosaic();
//var height_recover1995_ratio = height_1995.float().divide(height_1981_referance).multiply(100).toUint8().updateMask(height_1995.mask());
//var AGB_plantation1995 =  height_plantation1995.float().multiply(976).add(706).multiply(0.001287);
//var AGB_regrowth1995 =  height_regrowth1995.float().pow(2.1604).multiply(0.0194);
//var AGB_1995_ = ee.ImageCollection([AGB_plantation1995, AGB_regrowth1995]).mosaic().add(0.1).multiply(10).toUint8();//AGB*10倍了，加0.1是为了避免出现0值
//var AGB_1995 = AGB_1995_.updateMask(AGB_1995_.gt(0));
//var AGB_recover1995_ratio = AGB_1995.float().divide(AGB_1981_reference).multiply(100).toUint8().updateMask(AGB_1995.mask());
//1990
//var plantation_recover_time1990 = plantation_recover_time1995.subtract(5);
//var prt1990 = plantation_recover_time1990.updateMask(plantation_recover_time1990.gt(0));
//var height_plantation1990_ = prt1990.multiply(-0.2021).exp().multiply(-16.92).add(13.27).toUint8();
//var height_plantation1990 = height_plantation1990_.updateMask(height_plantation1990_.gt(2));
//var regrowth_recover_time1990 = regrowth_recover_time1995.subtract(5);
//var rrt1990 =  regrowth_recover_time1990.updateMask(regrowth_recover_time1990.gt(0));
//var height_regrowth1990_ = rrt1990.multiply(-0.2021).exp().multiply(-16.92).add(13.27).toUint8();
//var height_regrowth1990 = height_regrowth1990_.updateMask(height_regrowth1990_.gt(2));
//var height_1990 = ee.ImageCollection([height_regrowth1990, height_plantation1990]).mosaic();
//var height_recover1990_ratio = height_1990.float().divide(height_1981_referance).multiply(100).toUint8().updateMask(height_1990.mask());
//var AGB_plantation1990 =  height_plantation1990.float().multiply(976).add(706).multiply(0.001287);
//var AGB_regrowth1990 =  height_regrowth1990.float().pow(2.1604).multiply(0.0194);
//var AGB_1990_ = ee.ImageCollection([AGB_plantation1990, AGB_regrowth1990]).mosaic().add(0.1).multiply(10).toUint8();//AGB*10倍了，加0.1是为了避免出现0值
//var AGB_1990 = AGB_1990_.updateMask(AGB_1990_.gt(0));
//var AGB_recover1990_ratio = AGB_1990.float().divide(AGB_1981_reference).multiply(100).toUint8().updateMask(AGB_1990.mask());
//1985
//var plantation_recover_time1985 = plantation_recover_time1990.subtract(5);
//var prt1985 = plantation_recover_time1985.updateMask(plantation_recover_time1985.gt(0));
//var height_plantation1985_ = prt1985.multiply(-0.2021).exp().multiply(-16.92).add(13.27).toUint8();
//var height_plantation1985 = height_plantation1985_.updateMask(height_plantation1985_.gt(2));
//var regrowth_recover_time1985 = regrowth_recover_time1990.subtract(5);
//var rrt1985 =  regrowth_recover_time1985.updateMask(regrowth_recover_time1985.gt(0));
//var height_regrowth1985_ = rrt1985.multiply(-0.2021).exp().multiply(-16.92).add(13.27).toUint8();
//var height_regrowth1985 = height_regrowth1985_.updateMask(height_regrowth1985_.gt(2));
//var height_1985 = ee.ImageCollection([height_regrowth1985, height_plantation1985]).mosaic();
//var height_recover1985_ratio = height_1985.float().divide(height_1981_referance).multiply(100).toUint8().updateMask(height_1985.mask());
//var AGB_plantation1985 =  height_plantation1985.float().multiply(976).add(706).multiply(0.001287);
//var AGB_regrowth1985 =  height_regrowth1985.float().pow(2.1604).multiply(0.0194);
//var AGB_1985_ = ee.ImageCollection([AGB_plantation1985, AGB_regrowth1985]).mosaic().add(0.1).multiply(10).toUint8();//AGB*10倍了，加0.1是为了避免出现0值
//var AGB_1985 = AGB_1985_.updateMask(AGB_1985_.gt(0));
//var AGB_recover1985_ratio = AGB_1985.float().divide(AGB_1981_reference).multiply(100).toUint8().updateMask(AGB_1985.mask());

////恢复程度合并计算
//2020
var AGB_2020_=  height_2020.pow(e).multiply(d).add(0.1).multiply(10).toUint8();//乘了10倍，加0.1为了避免出现0值
var AGB_2020 = AGB_2020_.updateMask(AGB_2020_.gt(0));
var height_recover2020_ratio = height_2020.float().divide(height_1981_reference).multiply(100).toUint8().updateMask(height_2020.mask());
var AGB_recover2020_ratio = AGB_2020.float().divide(AGB_1981_reference).multiply(100).toUint8().updateMask(AGB_2020.mask());
//2015
var forest_recover_time2015 = forest_recover_time.subtract(5);
var frt2015 =  forest_recover_time2015.updateMask(forest_recover_time2015.gt(0));
var height_2015_ = frt2015.multiply(b).exp().multiply(a).add(c).toUint8();
var height_2015 = height_2015_.updateMask(height_2015_.gt(2));
var height_recover2015_ratio = height_2015.float().divide(height_1981_reference).multiply(100).toUint8().updateMask(height_2015.mask());
var AGB_2015_=  height_2015.float().pow(e).multiply(d).add(0.1).multiply(10).toUint8();//乘了10倍，加0.1为了避免出现0值
var AGB_2015 = AGB_2015_.updateMask(AGB_2015_.gt(0));
var AGB_recover2015_ratio = AGB_2015.float().divide(AGB_1981_reference).multiply(100).toUint8().updateMask(AGB_2015.mask());
//2010
var forest_recover_time2010 = forest_recover_time2015.subtract(5);
var frt2010 =  forest_recover_time2010.updateMask(forest_recover_time2010.gt(0));
var height_2010_ = frt2010.multiply(b).exp().multiply(a).add(c).toUint8();
var height_2010 = height_2010_.updateMask(height_2010_.gt(2));
var height_recover2010_ratio = height_2010.float().divide(height_1981_reference).multiply(100).toUint8().updateMask(height_2010.mask());
var AGB_2010_=  height_2010.float().pow(e).multiply(d).add(0.1).multiply(10).toUint8();//乘了10倍，加0.1为了避免出现0值
var AGB_2010 = AGB_2010_.updateMask(AGB_2010_.gt(0));
var AGB_recover2010_ratio = AGB_2010.float().divide(AGB_1981_reference.float()).multiply(100).toUint8().updateMask(AGB_2010.mask());
//2005
var forest_recover_time2005 = forest_recover_time2010.subtract(5);
var frt2005 = forest_recover_time2005.updateMask(forest_recover_time2005.gt(0));
var height_2005_ = frt2005.multiply(b).exp().multiply(a).add(c).toUint8();
var height_2005 = height_2005_.updateMask(height_2005_.gt(2));
var height_recover2005_ratio = height_2005.float().divide(height_1981_reference).multiply(100).toUint8().updateMask(height_2005.mask());
var AGB_2005_=  height_2005.float().pow(e).multiply(d).add(0.1).multiply(10).toUint8();//乘了10倍，加0.1为了避免出现0值
var AGB_2005 = AGB_2005_.updateMask(AGB_2005_.gt(0));
var AGB_recover2005_ratio = AGB_2005.float().divide(AGB_1981_reference.float()).multiply(100).toUint8().updateMask(AGB_2005.mask());
//2000
var forest_recover_time2000 = forest_recover_time2005.subtract(5);
var frt2000 = forest_recover_time2000.updateMask(forest_recover_time2000.gt(0));
var height_2000_ = frt2000.multiply(b).exp().multiply(a).add(c).toUint8();
var height_2000 = height_2000_.updateMask(height_2000_.gt(2));
var height_recover2000_ratio = height_2000.float().divide(height_1981_reference).multiply(100).toUint8().updateMask(height_2000.mask());
var AGB_2000_=  height_2000.float().pow(e).multiply(d).add(0.1).multiply(10).toUint8();//乘了10倍，加0.1为了避免出现0值
var AGB_2000 = AGB_2000_.updateMask(AGB_2000_.gt(0));
var AGB_recover2000_ratio = AGB_2000.float().divide(AGB_1981_reference.float()).multiply(100).toUint8().updateMask(AGB_2000.mask());
//1995
var forest_recover_time1995 = forest_recover_time2000.subtract(5);
var frt1995 = forest_recover_time1995.updateMask(forest_recover_time1995.gt(0));
var height_1995_ = frt1995.multiply(b).exp().multiply(a).add(c).toUint8();
var height_1995 = height_1995_.updateMask(height_1995_.gt(2));
var height_recover1995_ratio = height_1995.float().divide(height_1981_reference).multiply(100).toUint8().updateMask(height_1995.mask());
var AGB_1995_=  height_1995.float().pow(e).multiply(d).add(0.1).multiply(10).toUint8();//乘了10倍，加0.1为了避免出现0值
var AGB_1995 = AGB_1995_.updateMask(AGB_1995_.gt(0));
var AGB_recover1995_ratio = AGB_1995.float().divide(AGB_1981_reference.float()).multiply(100).toUint8().updateMask(AGB_1995.mask());
//1990
var forest_recover_time1990 = forest_recover_time1995.subtract(5);
var frt1990 = forest_recover_time1990.updateMask(forest_recover_time1990.gt(0));
var height_1990_ = frt1990.multiply(b).exp().multiply(a).add(c).toUint8();
var height_1990 = height_1990_.updateMask(height_1990_.gt(2));
var height_recover1990_ratio = height_1990.float().divide(height_1981_reference).multiply(100).toUint8().updateMask(height_1990.mask());
var AGB_1990_=  height_1990.float().pow(e).multiply(d).add(0.1).multiply(10).toUint8();//乘了10倍，加0.1为了避免出现0值
var AGB_1990 = AGB_1990_.updateMask(AGB_1990_.gt(0));
var AGB_recover1990_ratio = AGB_1990.float().divide(AGB_1981_reference.float()).multiply(100).toUint8().updateMask(AGB_1990.mask());
//1985
var forest_recover_time1985 = forest_recover_time1990.subtract(5);
var frt1985 = forest_recover_time1985.updateMask(forest_recover_time1985.gt(0));
var height_1985_ = frt1985.multiply(b).exp().multiply(a).add(c).toUint8();
var height_1985 = height_1985_.updateMask(height_1985_.gt(2));
var height_recover1985_ratio = height_1985.float().divide(height_1981_reference).multiply(100).toUint8().updateMask(height_1985.mask());
var AGB_1985_=  height_1985.float().pow(e).multiply(d).add(0.1).multiply(10).toUint8();//乘了10倍，加0.1为了避免出现0值
var AGB_1985 = AGB_1985_.updateMask(AGB_1985_.gt(0));
var AGB_recover1985_ratio = AGB_1985.float().divide(AGB_1981_reference).multiply(100).toUint8().updateMask(AGB_1985.mask());

//制图恢复速率（高度和生物量）放大了10倍
//种植林高度公式求导后f(x) = 3.420*e^-0.2021x   //16.92* 0.2021*e^-0.2021x
//生物量与恢复时间公式f(x) =  0.001287*(706 + 976*(-16.92*e^-0.2021x+13.27)) = 0.9086+1.2561(-16.92*e^-0.2021x+13.27)
//生物量与恢复时间公式求导后f(x) = 1.2561(3.42e^−0.2021x) = 4.2959*e^−0.2021x
//自然再生林生物量与恢复时间公式f(x) =  0.0194(-16.92e^(-0.2021t)+13.27)^2.1604
//上式求导后= 0.0194*3.420*2.1604*(-16.92e^(-0.2021t)+13.27)^1.1604*e^-0.2021t = 0.1433(-16.92e^(-0.2021t)+13.27)^1.1604*e^-0.2021t

//2020
var height_recover_rate2020 = forest_recover_time.multiply(b).exp().multiply(a).multiply(b).add(0.1).multiply(10).toUint8();
var AGB_recover_rate2020 = forest_recover_time.multiply(b).exp().multiply(d).multiply(a).multiply(b).multiply(e).multiply
      (forest_recover_time.multiply(b).exp().multiply(a).add(c).pow(e - 1)).add(0.1).multiply(10).toUint8();
//2015
var height_recover_rate2015 = frt2015.multiply(b).exp().multiply(a).multiply(b).add(0.1).multiply(10).toUint8();
var AGB_recover_rate2015 = frt2015.multiply(b).exp().multiply(d).multiply(a).multiply(b).multiply(e).multiply
      (frt2015.multiply(b).exp().multiply(a).add(c).pow(e - 1)).add(0.1).multiply(10).toUint8();
//2010
var height_recover_rate2010 = frt2010.multiply(b).exp().multiply(a).multiply(b).add(0.1).multiply(10).toUint8();
var AGB_recover_rate2010 = frt2010.multiply(b).exp().multiply(d).multiply(a).multiply(b).multiply(e).multiply
      (frt2010.multiply(b).exp().multiply(a).add(c).pow(e - 1)).add(0.1).multiply(10).toUint8();
//2005
var height_recover_rate2005 = frt2005.multiply(b).exp().multiply(a).multiply(b).add(0.1).multiply(10).toUint8();
var AGB_recover_rate2005 = frt2005.multiply(b).exp().multiply(d).multiply(a).multiply(b).multiply(e).multiply
      (frt2005.multiply(b).exp().multiply(a).add(c).pow(e - 1)).add(0.1).multiply(10).toUint8();
//2000
var height_recover_rate2000 = frt2000.multiply(b).exp().multiply(a).multiply(b).add(0.1).multiply(10).toUint8();
var AGB_recover_rate2000 = frt2000.multiply(b).exp().multiply(d).multiply(a).multiply(b).multiply(e).multiply
      (frt2000.multiply(b).exp().multiply(a).add(c).pow(e - 1)).add(0.1).multiply(10).toUint8();
//1995
var height_recover_rate1995 = frt1995.multiply(b).exp().multiply(a).multiply(b).add(0.1).multiply(10).toUint8();
var AGB_recover_rate1995 = frt1995.multiply(b).exp().multiply(d).multiply(a).multiply(b).multiply(e).multiply
      (frt1995.multiply(b).exp().multiply(a).add(c).pow(e - 1)).add(0.1).multiply(10).toUint8();
//1990
var height_recover_rate1990 = frt1990.multiply(b).exp().multiply(a).multiply(b).add(0.1).multiply(10).toUint8();
var AGB_recover_rate1990 = frt1990.multiply(b).exp().multiply(d).multiply(a).multiply(b).multiply(e).multiply
      (frt1990.multiply(b).exp().multiply(a).add(c).pow(e - 1)).add(0.1).multiply(10).toUint8();
//1985
var height_recover_rate1985 = frt1985.multiply(b).exp().multiply(a).multiply(b).add(0.1).multiply(10).toUint8();
var AGB_recover_rate1985 = frt1985.multiply(b).exp().multiply(d).multiply(a).multiply(b).multiply(e).multiply
      (frt1985.multiply(b).exp().multiply(a).add(c).pow(e - 1)).add(0.1).multiply(10).toUint8();

//生成随机点验证2000高度
var points_SEAsia1 = ee.FeatureCollection.randomPoints(SE_Asia, 50000);
var height_my = height_2000.reduceRegions({
  collection: points_SEAsia,
  reducer: ee.Reducer.mean(),
  scale: 30,
});
var height_his = forest_height2000.reduceRegions({
  collection: points_SEAsia,
  reducer: ee.Reducer.mean(),
  scale: 30,
});

//导出
Export.table.toDrive({
  collection:height_my,
  folder:"SEA_height_validation2000",
  description: "SEA_height_my_2000",
  fileNamePrefix: "SEA_height_my_2000",
});
Export.table.toDrive({
  collection:height_his,
  folder:"SEA_height_validation2000",
  description: "SEA_height_his_2000",
  fileNamePrefix: "SEA_height_his_2000",
});

//验证2010AGB
var AGB_reference2010 = ee.Image("projects/sat-io/open-datasets/ESA/ESA_CCI_AGB/CCI_BIOMASS_100m_AGB_2010_v4").select(['AGB']);
//Map.addLayer(AGB_reference2010,{min:1,max:450,palette: palette4},'AGB_reference2010');
var AGB_2010 = AGB_2010.setDefaultProjection({crs: 'EPSG:4326',scale: 30});//40的时候能输出验证点值
var AGB_my2010_100 = AGB_2010.reduceResolution({reducer: ee.Reducer.mean(),maxPixels: 65536})
    .reproject({crs: 'EPSG:4326',scale: 100}).float().divide(10).divide(0.09);
//Map.addLayer(AGB_my2010_100,{min:1,max:450,palette: palette4},'AGB_2010_my100');

var validation_points = ee.FeatureCollection(validation, 'geometry');
var AGB_reference2010_Values = AGB_reference2010.reduceRegions({
  collection: validation_points,reducer: ee.Reducer.mean(),
  scale: 100,});
var AGB_my2010_100_Values = AGB_my2010_100.reduceRegions({
  collection: validation_points,reducer: ee.Reducer.mean(),
  scale: 100,});
//导出
Export.table.toDrive({
  collection:AGB_reference2010_Values,
  folder:"SE_Asia_AGB_reference2010",
  description: "SE_Asia_AGB_reference2010",
});
Export.table.toDrive({
  collection:AGB_my2010_100_Values,
  folder:"SE_Asia_AGB_my2010",
  description: "SE_Asia_AGB_my2010",
});


//Map.addLayer(deforest1,{min: 1982, max: 2019, palette: palette1}, 'deforest1');
Map.addLayer(recover_time,{min: 1982, max: 2019, palette: palette1},'recover_time');
Map.addLayer(recover_type2020,{min: 1, max: 3, palette: palette3}, 'recover_type2020');
//Map.addLayer(forest_regrowth,{palette:["c9dd22"]}, 'forest_regrowth');
//Map.addLayer(tree_plantation,{palette:["057748"]}, 'tree_plantation');
////show height
//Map.addLayer(height_regrowth2020,{min: 0, max: 40, palette: palette4}, 'height_regrowth2020');
//Map.addLayer(height_plantation2020,{min: 0, max: 40, palette: palette4}, 'height_plantation2020');
//Map.addLayer(height_2015,{min: 0, max: 40, palette: palette4}, 'height_2015');
//Map.addLayer(height_2010,{min: 0, max: 40, palette: palette4}, 'height_2010');
//Map.addLayer(height_2005,{min: 0, max: 40, palette: palette4}, 'height_2005');
//Map.addLayer(height_2000,{min: 0, max: 40, palette: palette4}, 'height_2000');
//Map.addLayer(height_1995,{min: 0, max: 40, palette: palette4}, 'height_1995');
//Map.addLayer(height_1990,{min: 0, max: 40, palette: palette4}, 'height_1990');
//Map.addLayer(height_1985,{min: 0, max: 40, palette: palette4}, 'height_1985');
////show AGB
//Map.addLayer(AGB_2020,{min: 0, max: 20, palette: palette4}, 'AGB_2020');
//Map.addLayer(AGB_2015,{min: 0, max: 20, palette: palette4}, 'AGB_2015');
//Map.addLayer(AGB_2010,{min: 0, max: 20, palette: palette4}, 'AGB_2010');
//Map.addLayer(AGB_2005,{min: 0, max: 20, palette: palette4}, 'AGB_2005');
//Map.addLayer(AGB_2000,{min: 0, max: 20, palette: palette4}, 'AGB_2000');
//Map.addLayer(AGB_1995,{min: 0, max: 20, palette: palette4}, 'AGB_1995');
//Map.addLayer(AGB_1990,{min: 0, max: 20, palette: palette4}, 'AGB_1990');
//Map.addLayer(AGB_1985,{min: 0, max: 20, palette: palette4}, 'AGB_1985');
////亚马逊和东南亚边界
//var styling={color:'black',fillColor:'00000000'};
//Map.addLayer(table.style(styling),{},"SE_ASIA");//设置显示样式：color代表边界颜色；fillcolor代表填充颜色
//Map.addLayer(table2.style(styling),{},"Amazon");
var height_regrowth = recover_type2020.addBands([
                    height_recover2020_ratio, height_recover2015_ratio, height_recover2010_ratio, height_recover2005_ratio,
                    height_recover2000_ratio, height_recover1995_ratio, height_recover1990_ratio, height_recover1985_ratio,
                    height_recover_rate2020, height_recover_rate2015, height_recover_rate2010, height_recover_rate2005, 
                    height_recover_rate2000, height_recover_rate1995, height_recover_rate1990, height_recover_rate1985])
                    .rename([
                    'Regrowth_type_2020',
                    'Height_regrowth_ratio_2020', 'Height_regrowth_ratio_2015', 'Height_regrowth_ratio_2010', 'Height_regrowth_ratio_2005',
                    'Height_regrowth_ratio_2000', 'Height_regrowth_ratio_1995', 'Height_regrowth_ratio_1990', 'Height_regrowth_ratio_1985',
                    'Height_regrowth_rate_2020', 'Height_regrowth_rate_2015', 'Height_regrowth_rate_2010', 'Height_regrowth_rate_2005',
                    'Height_regrowth_rate_2000', 'Height_regrowth_rate_1995', 'Height_regrowth_rate_1990', 'Height_regrowth_rate_1985']);
var AGB_regrowth = recover_type2020.addBands([
                    AGB_recover2020_ratio, AGB_recover2015_ratio, AGB_recover2010_ratio, AGB_recover2005_ratio,
                    AGB_recover2000_ratio, AGB_recover1995_ratio, AGB_recover1990_ratio, AGB_recover1985_ratio,
                    AGB_recover_rate2020, AGB_recover_rate2015, AGB_recover_rate2010, AGB_recover_rate2005, 
                    AGB_recover_rate2000, AGB_recover_rate1995, AGB_recover_rate1990, AGB_recover_rate1985])
                    .rename([
                    'Regrowth_type_2020', 
                    'AGB_regrowth_ratio_2020', 'AGB_regrowth_ratio_2015', 'AGB_regrowth_ratio_2010', 'AGB_regrowth_ratio_2005',
                    'AGB_regrowth_ratio_2000', 'AGB_regrowth_ratio_1995', 'AGB_regrowth_ratio_1990', 'AGB_regrowth_ratio_1985',
                    'AGB_regrowth_rate_2020', 'AGB_regrowth_rate_2015', 'AGB_regrowth_rate_2010', 'AGB_regrowth_rate_2005',
                    'AGB_regrowth_rate_2000', 'AGB_regrowth_rate_1995', 'AGB_regrowth_rate_1990', 'AGB_regrowth_rate_1985']);

//**统计恢复类型像元数量**
var histogram = recover_type2020.reduceRegion({
  reducer: ee.Reducer.frequencyHistogram(),
  geometry: SE_Asia.geometry(),
  scale: 30,
  maxPixels: 1e13 // 最大像素数
});
var count30 = ee.Number(ee.Dictionary(histogram.get("TransitionClass")).get("30"));
var count41 = ee.Number(ee.Dictionary(histogram.get("TransitionClass")).get("41"));
var count42 = ee.Number(ee.Dictionary(histogram.get("TransitionClass")).get("42"));
var count43 = ee.Number(ee.Dictionary(histogram.get("TransitionClass")).get("43"));
// 创建包含计数结果的特征
var feature1 = ee.Feature(null, {value: 30, Count: count30});
var feature2 = ee.Feature(null, {value: 41, Count: count41});
var feature3 = ee.Feature(null, {value: 42, Count: count42});
var feature4 = ee.Feature(null, {value: 43, Count: count43});

// 创建一个要素集合并添加特征
var featureCollection = ee.FeatureCollection([feature1, feature2, feature3, feature4]);

// 导出特征集合到 Google Drive
Export.table.toDrive({
  collection: featureCollection,
  description: 'Count', // 导出文件的名称
  folder: 'SE_Asia_Count', // 选择您的 Google Drive 文件夹
  fileFormat: 'CSV' // 导出文件格式
});

//**统计恢复程度**
var height_regrowth_statistics = height_regrowth.reduceRegion({
  reducer: ee.Reducer.mean().combine(ee.Reducer.stdDev(), '', true), // 同时计算均值和标准差
  geometry: SE_Asia.geometry(), // 指定矢量范围的几何
  scale: 1000, // 分辨率，单位为米,500?30?
  maxPixels: 1e13 // 最大像素数
});
print(height_regrowth_statistics);

// 导出影像
//Export.image.toDrive({image: height_regrowth,description: 'height_regrowth500',folder: 'Deforest_SE_Asia_regrowth500',region: SE_Asia,scale: 500,crs: 'EPSG:4326', maxPixels: 1e13,});
//Export.image.toDrive({image: AGB_regrowth,description: 'AGB_regrowth500',folder: 'Deforest_SE_Asia_regrowth500',region: SE_Asia,scale: 500,crs: 'EPSG:4326', maxPixels: 1e13,});

//export Southeast_Asia 排除-10 90, 10 90, 10 110, 10 120,0_130, 10_130,
var lonMin = 90; var lonMax = 140; 
var latMin = -10; var latMax = 20; 
for (var lon = lonMin; lon < lonMax; lon += 10) {for (var lat = latMin; lat < latMax; lat += 10) {
    var blockGeometry = ee.Geometry.Rectangle([lon, lat, lon + 10, lat + 10]);
   var clipped_height_regrowth = height_regrowth.clip(blockGeometry);
   var clipped_AGB_regrowth = AGB_regrowth.clip(blockGeometry);
    var direction = '';if (lat >= 0) {direction += 'N' + lat ;} else {direction += 'S' + -lat;} if (lon >= 0) {direction += '_E'  + lon;} else {direction += '_W' + -lon ;}
    var export1 = {image: clipped_height_regrowth,description: 'Southeast_Asia_height_regrowth_' + direction,
    folder: 'Deforest_Southeast_Asia_height_regrowth30',scale: 30, crs: 'EPSG:4326', maxPixels: 1e13, fileDimensions: [18688, 18688], region: blockGeometry,skipEmptyTiles: true};Export.image.toDrive(export1);
    var export2 = {image: clipped_AGB_regrowth,description: 'Southeast_Asia_AGB_regrowth_' + direction,
    folder: 'Deforest_Southeast_Asia_AGB_regrowth30',scale: 30, crs: 'EPSG:4326', maxPixels: 1e13, fileDimensions: [18688, 18688], region: blockGeometry,skipEmptyTiles: true};Export.image.toDrive(export2);}}
